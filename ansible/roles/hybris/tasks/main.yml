---
# install hybris

- include: local_conf.yml
  when: build_local == 'true'

- include: ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- include: osx.yml
  when: ansible_distribution == 'MacOSX'

- include: default.yml
  when: hybris_loaded_distribution |default(False) == False

### Download and install Hybris ##

- name: Stop hybris service
  service:
    name=hybris
    state=stopped
  when: hybris_service_stop |default(False)
  tags: service

- name: Stop CIS Service
  command: "{{hybris_home_dir}}/cis/apache-tomcat-7.0.56/bin/catalina.sh stop"
  when: hybris_cis_service_stop |default(False)
  tags: service

- name: Clone hybris git repo
  git: repo={{ hybris_git_user }} dest={{ hybris_home_dir }} force=yes accept_hostkey=yes
  when: clone_repo |default(False)
  tags: git

- name: Checkout tagged version of hybris git repo
  git: repo={{ hybris_git_user }} dest={{ hybris_home_dir }} version={{ branch }} force=yes accept_hostkey=yes
  when: checkout_branch |default(False) and branch is defined
  tags: git

- name: Checkout archive version from git repo
  command: git  archive --format=tar --remote={{ hybris_git_user }}:{{ hybris_home_dir }} {{ branch }} > /opt/{{ branch }}.tar
  when: hybris_install_archive |default(False)
  tags: git

- name: Untar git archive
  unarchive: src=/opt/{{ branch }}.tar dest={{ hybris_home_dir }}
  when: hybris_install_archive |default(False)
  tags: git

- name: Create temp directory
  file:
    path={{ hybris_temp_dir }}
    state=directory
    owner=root
    group=root
    mode=0755
  tags: build

- name: Copy s3 configuration
  copy: src=.s3cfg dest=~/ owner=root group=root mode=0600
  tags: build

- name: Copy hybris install vagrant
  copy: src={{ local_dir }}/{{ hybris_install_file }} dest={{ hybris_temp_dir }}/{{ hybris_install_file }} force=yes
  when: hybris_vagrant_file |default(False)
  tags: build

- name: Download hybris build from S3
  command: "{{ item }}"
  with_items:
    - s3cmd get --skip-existing --no-check-md5 --no-encrypt {{ hybris_s3_object }} {{ hybris_temp_dir }}
  when: hybris_s3_file |default(false)
  tags: build

- name: Untar hybris install archive
  unarchive: src={{ hybris_temp_dir }}/{{ hybris_install_file }} dest={{ hybris_home_dir }} copy=no
  when: hybris_install_archive |default(False)
  tags: build

- name: get RDS instance facts
  rds:
    aws_access_key={{ lookup('env', 'AWS_ACCESS_KEY_ID') }}
    aws_secret_key={{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}
    command=facts
    instance_name={{ rds_instance_name }}
    region={{ region }}
  when: rds_db_enable |default(False)
  register: rds
  tags: build

- name: Add hybris configuration
  template:
    src=local_properties.j2
    dest={{ hybris_conf_file }}
    owner=root
    group=root
    mode=0644
  when: hybris_enable |default(False)
  tags: build

- name: Add hybris cis configuration
  template:
    src=cispayment_properties.j2
    dest={{ hybris_cis_conf_file }}
    owner=root
    group=root
    mode=0644
  when: hybris_enable |default(False)
  tags: build

- name: Add default_properties.j2
  template:
    src=default_properties.j2
    dest={{ hybris_default_properties }}
    owner=root
    group=root
    mode=0644
  when: hybris_enable |default(False)
  tags: build

- name: Add payment-subscription_properties.j2
  template:
    src=payment-subscription_properties.j2
    dest={{ hybris_payment_subscription_properties }}
    owner=root
    group=root
    mode=0644
  when: hybris_enable |default(False)
  tags: build

- name: Add production-profile_properties.j2
  template:
    src=production-profile_properties.j2
    dest={{ hybris_production_profile_properties }}
    owner=root
    group=root
    mode=0644
  when: hybris_enable |default(False)
  tags: build

- name: Set ANT_HOME environment variable
  lineinfile: dest={{ ant_profile }} regexp='^ANT_HOME.*' line='ANT_HOME={{ hybris_ant_home }}' insertbefore='^PATH.*'
  tags: ant

- name: Set ANT_OPTS envrionment variable
  lineinfile: dest={{ ant_profile }} regexp='^ANT_OPTS.*' line='ANT_OPTS="-Xmx200m -XX:MaxPermSize=128M"' insertbefore='^PATH.*'
  tags: ant

- name: Set PLATFORM_HOME envrionment variable
  lineinfile: dest={{ ant_profile }} regexp='^PLATFORM_HOME.*' line='PLATFORM_HOME={{ hybris_platform_home }}' insertbefore='^PATH.*'
  tags: ant

- name: Add Ant binaries to PATH environment variable
  lineinfile: dest={{ ant_profile }} state=present backrefs=yes regexp='PATH=(["]*)((?!.*?{{ hybris_ant_path }}).*?)(["]*)$' line="PATH=\1\2:{{ hybris_ant_home }}\3"
  tags: ant

- name: Create DB driver dir
  file: path={{ hybris_mysql_lib_dir }} state=directory
  tags: build

- name: Add hybris mysql driver
  copy: src={{ hybris_mysql_driver }} dest={{ hybris_mysql_lib_dir }} owner=root group=root mode=0644 
  tags: build

- name: Set hybris_master_blaster var
  set_fact: hybris_host_type={{ 'master' if hybris_master_blaster == ec2_tag_Name  else 'slave' }}
  tags: build
  when: aws_enabled |default(False)

- name: Set hybris_master_blaster var
  set_fact: hybris_host_type={{ 'master' if hybris_master_blaster == hybris_master_blaster else 'slave' }}
  tags: build
  when: local_enabled |default(False)

- name: Install correct phantom-js version for Linux
  shell: chdir={{ hybris_node_dir }}  npm install phantomjs@1.9.7-15
  when: linux_install |default(False)
  tags: build

- name: Setup hybris npm
  shell: chdir={{ hybris_node_dir }} npm install
  tags: build

- name: Clean environment before build
  shell: chdir={{ hybris_home_dir }} . "{{ ant_profile }}" && ant clean
  tags: build
  when: hybris_ant_clean |default(False)

- name: Full Build hybris server
  shell: chdir={{ hybris_home_dir }} . "{{ ant_profile }}" && ant install && ant customize && ant
  tags: build

- name: Initialize hybris database
  shell: chdir={{ hybris_home_dir }} . "{{ ant_profile }}" && ant initmaster
  when: hybris_init_db |default(False) and hybris_host_type == 'master'
  tags: build

- name: Update hybris 
  shell: chdir={{ hybris_home_dir }} . "{{ ant_profile }}" && ant updatemaster
  when: hybris_update_db |default(False) and hybris_host_type == 'master'
  tags: build

- name: Add hybris user
  user: name=hybris comment="Hybris User" uid=1055 home={{ hybris_home_dir }}
  tags: build

- name: Set permissions on hybris directory
  file:
    path={{ hybris_home_dir }}
    state=directory
    owner=hybris
    group=hybris
    recurse=yes
  when: hybris_enable |default(False)
  tags: build

- include: deploy_cis_war.yml
  when: deploy_cis_war |default(False)

# services start

- name: Add hybris init.d script
  template:
    src=init.d-template.j2
    dest=/etc/init.d/hybris
    owner=root
    group=root
    mode=0755
  when: hybris_enable |default(False) and hybris_initd_service == 'true'
  tags: service

- name: Enable hybris service
  service:
    name=hybris
    enabled={{ 'yes' if hybris_enable else 'no'  }}
  when: hybris_enable |default(False) and hybris_initd_service == 'true'
  tags: service

- name: Start CIS Service
  command: "{{ hybris_home_dir }}/cis/apache-tomcat-7.0.56/bin/catalina.sh start"
  when: hybris_cis_enable |default(False)
  tags: service

- name: Start hybris service
  sudo: yes
  sudo_user: hybris
  service:
    name=hybris
    state={{ 'started' if hybris_enable else 'stopped'  }}
  when: hybris_enable |default(False) and hybris_initd_service == 'true'
  tags: service

- name: Create Hybris runit directory
  file:
    path={{ hybris_runit_dir }}
    state=directory
    owner=root
    group=root
    mode=0755
  when: docker == true
  tags: service 

- name: Add Hybris runit service
  template: 
    src=runit-template.j2
    dest={{ hybris_runit_dir }}/run
    owner=root
    group=root
    mode=0755
  when: docker == true
  tags: service

- wait_for:
    state=started
    host={{ hybris_connect_addr }}
    port={{ hybris_connect_port }}
    delay=2
  tags: service
